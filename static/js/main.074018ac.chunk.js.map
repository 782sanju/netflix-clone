{"version":3,"sources":["axios.js","Row.js","Requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","style","color","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginal","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAQeA,E,OALEC,EAAMC,OAAO,CAC1BC,QAAS,iC,iCC4DEC,MAxDf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,EACdC,mBAAS,IADK,mBACnCC,EADmC,KAC3BC,EAD2B,OAENF,mBAAS,IAFH,mBAEnCG,EAFmC,KAEvBC,EAFuB,KAoC1C,OAhCAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAEIN,EAAUM,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CADY,uBAAC,WAAD,wBAMZG,KACD,CAACb,IAEJc,QAAQC,MAAMZ,GAwBV,sBAAKa,UAAU,MAAf,UACI,oBAAIC,MAAO,CAAEC,MAAO,SAApB,SAAgCnB,IAChC,qBAAKiB,UAAU,cAAf,SACKb,EAAOgB,KAAI,SAAAC,GAAK,OACb,qBAEIC,QAAS,kBArBT,SAACD,GACbf,EACAC,EAAc,IAEdgB,KAAkB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,IACvBC,MAAK,SAACC,GACH,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDvB,EAAcoB,EAAUjB,IAAI,SAE7BqB,OAAM,SAACC,GAAD,OAAWjB,QAAQkB,IAAID,MAYTE,CAAYb,IAC3BJ,UAAS,qBAAgBf,GAAc,mBACvCiC,IAAG,UA/CV,wCA+CU,OAAgBjC,EAAamB,EAAMe,YAAcf,EAAMgB,eAAiBC,IAAKjB,EAAMG,MAHjFH,EAAMkB,SAOvB,8BACKjC,GAAc,cAAC,IAAD,CAASkC,QAASlC,EAAYmC,KApC5C,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACRC,SAAU,YC1BhBC,EAAU,mCAcDC,EAZE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,qBAAqB,wBAAD,OAA0BH,EAA1B,sBACpBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,MCsCPU,MA3Cf,WAAmB,IAcGC,EAAKC,EAdT,EACYvD,mBAAS,IADrB,mBACPkB,EADO,KACAsC,EADA,KAiBd,OAdAnD,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIqC,EAASE,sBAD7C,OACUtC,EADV,OAEIgD,EAAShD,EAAQC,KAAKC,QAClB+C,KAAKC,MAAMD,KAAKE,SAAWnD,EAAQC,KAAKC,QAAQkD,OAAS,KAHjE,4CADY,uBAAC,WAAD,wBAOZjD,KAED,IACHC,QAAQkB,IAAIZ,GAKR,wBAAQJ,UAAU,SACdC,MAAO,CACH8C,eAAgB,QAChBC,gBAAgB,6CAAD,cAA+C5C,QAA/C,IAA+CA,OAA/C,EAA+CA,EAAOgB,cAAtD,MACf6B,mBAAoB,kBAJ5B,SAOI,sBAAKjD,UAAU,kBAAf,UACI,oBAAIA,UAAU,eAAd,UAEU,OAALI,QAAK,IAALA,OAAA,EAAAA,EAAOrB,SAAP,OAAgBqB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOG,QAAvB,OAA+BH,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAO8C,iBAG3C,sBAAKlD,UAAU,iBAAf,UACI,wBAAQA,UAAU,gBAAlB,kBACA,wBAAQA,UAAU,gBAAlB,qBAEJ,oBAAIA,UAAU,qBAAd,gBAAoCI,QAApC,IAAoCA,OAApC,EAAoCA,EAAO+C,YArBrCX,EAsBG,OAACpC,QAAD,IAACA,OAAD,EAACA,EAAO+C,SAtBNV,EAsBgB,KArBzB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIY,OAAO,EAAGX,EAAI,GAAK,MAAQD,S,MCkBjDa,MAnCf,WAAgB,IAAD,EACgBnE,oBAAS,GADzB,mBACJoE,EADI,KACEC,EADF,KAmBX,OAhBAhE,qBAAU,WAMN,OALAiE,OAAOC,iBAAiB,UAAU,WAC1BD,OAAOE,QAAU,IACjBH,GAAW,GACRA,GAAW,MAEf,WACHC,OAAOG,oBAAoB,UAAU,WAC7BH,OAAOE,QAAU,IACjBH,GAAW,GACRA,GAAW,SAI3B,IAGC,sBAAKvD,UAAS,cAASsD,GAAQ,aAA/B,UAEI,qBAAKtD,UAAU,WACXkB,IAAI,2GACJG,IAAI,iBAER,qBACIrB,UAAU,aACVkB,IAAI,+EACJG,IAAI,wBCPLuC,MAlBf,WACE,OACE,sBAAK5D,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAKjB,MAAM,oBAAoBC,SAAU8C,EAASE,qBAChD/C,YAAY,IACd,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU8C,EAASC,gBAC7C,cAAC,EAAD,CAAKhD,MAAM,YAAYC,SAAU8C,EAASG,gBAC1C,cAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAU8C,EAASI,oBAC9C,cAAC,EAAD,CAAKnD,MAAM,gBAAgBC,SAAU8C,EAASK,oBAC9C,cAAC,EAAD,CAAKpD,MAAM,gBAAgBC,SAAU8C,EAASM,oBAC9C,cAAC,EAAD,CAAKrD,MAAM,UAAUC,SAAU8C,EAASO,qBACxC,cAAC,EAAD,CAAKtD,MAAM,eAAeC,SAAU8C,EAASQ,yBCRpCuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvD,MAAK,YAAkD,IAA/CwD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.074018ac.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\nexport default instance","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios'\r\nimport './row.css'\r\nimport YouTube from \"react-youtube\"\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    console.table(movies);\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('')\r\n        } else {\r\n            movieTrailer(movie?.name || '')\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n\r\n                }).catch((error) => console.log(error))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 style={{ color: \"white\" }}>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n\r\n            </div>\r\n            <div>\r\n                {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"9a5f8983ad011d0cb31fc86761de985b\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginal: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios'\r\nimport requests from './Requests'\r\nimport './banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginal)\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]);\r\n        }\r\n        fetchData();\r\n\r\n    }, []);\r\n    console.log(movie);\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url (\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPosition: \"center center \"\r\n            }}\r\n        >\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">Like</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">{movie?.overview}</h1>\r\n                {truncate(movie?.overview, 150)}\r\n            </div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./nav.css\"\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", () => {\r\n                if (window.scrollY < 100) {\r\n                    handleShow(false);\r\n                } else handleShow(true);\r\n            });\r\n        };\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n\r\n            <img className=\"nav_logo\"\r\n                src=\"https://assets.brand.microsites.netflix.io/assets/493f5bba-81a4-11e9-bf79-066b49664af6_cm_1440w.png?v=41\"\r\n                alt=\"netflix logo\" />\r\n\r\n            <img\r\n                className=\"nav_avatar\"\r\n                src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n                alt=\"netflix avatart\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\nimport './App.css';\nimport Row from './Row';\nimport requests from './Requests';\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginal}\n        isLargeRow={true} />\n      <Row title=\"TRENDING NOW\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"TOP RATED\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"ACTION MOVIES\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"COMEDY MOVIES\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"HORROR MOVIES\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"ROMANCE\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"DOCUMENTRIES\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}